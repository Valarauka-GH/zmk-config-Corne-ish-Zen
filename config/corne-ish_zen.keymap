/*
*
* Copyright (c) 2021 Darryl deHaan
* SPDX-License-Identifier: MIT
*
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LYR_NUM 1
#define LYR_NAV 2
#define LYR_ADJ 3

/ {
        keymap {
                compatible = "zmk,keymap";

                base_layer {
                        label = "BASE";
// -----------------------------------------------------------------------------------------
// | ESC  |  Q  |  W  |  F  |  P  |  B  |     |  J  |  L   |  U  |  Y  |  ;  |   \   |
// | BKSP |  A  |  R  |  S  |  T  |  G  |     |  M  |  N   |  E  |  I  |  O  |   '   |
// | CTRL |  Z  |  X  |  C  |  D  |  V  |     |  K  |  H   |  ,  |  .  |  /  | ALT/` |
//            | GUI/DEL | NUM | SHF/SPC |     | RET | NAV  | TAB |
//                          \-------------ADJ---------/
                        bindings = <
   &kp ESC   &kp Q &kp W &kp F &kp P &kp B    &kp J &kp L  &kp U     &kp Y   &kp SEMI &kp BSLH
   &kp BSPC  &kp A &kp R &kp S &kp T &kp G    &kp M &kp N  &kp E     &kp I   &kp O    &kp SQT
   &kp LCTRL &kp Z &kp X &kp C &kp D &kp V    &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &mt LALT GRAVE
   &mt LGUI DEL &mo LYR_NUM &mt LSHFT SPACE   &kp RET &mo LYR_NAV &kp TAB
                        >;
                };

                number_layer {
                        label = "NUM";
// -----------------------------------------------------------------------------------------
// |      | F1  | F2  | F3  | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 |      |
// |      |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |      |
// |      |     |     |     |     |     |   |     |  -  |  =  |  [  |  ]  |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5     &kp F6  &kp F7    &kp F8    &kp F9   &kp F10  &trans
   &trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5     &kp N6  &kp N7    &kp N8    &kp N9   &kp N0   &trans
   &trans  &trans  &trans  &trans  &trans  &trans     &trans  &kp MINUS &kp EQUAL &kp LBKT &kp RBKT &trans
                           &trans  &trans  &trans     &trans  &trans    &trans
                        >;
                };

                nav_layer {
                        label = "NAV";
// -----------------------------------------------------------------------------------------
// |      |     |     | UP  |     |     |   |     | PGUP| HOME| BACK|     |      |
// |      |     | LT  | DN  | RT  |     |   |     | PGDN| END | FWD |     |      |
// |      | F1  | F2  | F3  | F4  | F5  |   | F6  | F7  | F8  | F9  | F10 |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &trans  &trans  &trans   &kp UP   &trans    &trans      &trans  &kp PG_UP &kp HOME &kp C_AC_BACK    &trans  &trans
   &trans  &trans  &kp LEFT &kp DOWN &kp RIGHT &trans      &trans  &kp PG_DN &kp END  &kp C_AC_FORWARD &trans  &trans
   &trans  &kp F1  &kp F2   &kp F3   &kp F4    &kp F5      &kp F6  &kp F7    &kp F8   &kp F9           &kp F10 &trans
                    	     &trans   &trans    &trans      &trans  &trans    &trans
                        >;
                };

                adjust_layer {
                        label = "ADJUST";
// -----------------------------------------------------------------------------------------
// | RESET|     |     |     |     |     |   |     |VL_UP|PREV |BR_UP|     |      |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   |     |VL_DN|NEXT |BR_DN|     |      |
// | CAPS |     |     |     |     |     |   |     |MUTE | P/P |     |     |      |
//                    |     |     |     |   |     |     |     |
                        bindings = <
   &reset     &trans       &trans       &trans       &trans       &trans         &trans  &kp C_VOL_UP &kp C_PREV &kp C_BRI_UP &trans  &trans
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans  &kp C_VOL_DN &kp C_NEXT &kp C_BRI_DN &trans  &trans
   &kp CAPS   &trans       &trans       &trans       &trans       &trans         &trans  &kp C_MUTE   &kp C_PP   &trans  &trans  &trans
                          	        &trans       &trans       &trans         &trans  &trans  &trans
                        >;
                };

        };
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <LYR_NUM LYR_NAV>;
            then-layer = <LYR_ADJ>;
        };
    };
};